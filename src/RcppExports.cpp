// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// T_sq_nonpar_precomp_cpp
double T_sq_nonpar_precomp_cpp(arma::vec means_1, arma::vec means_2, double nrow1, double nrow2, arma::mat cov1, arma::mat cov2);
RcppExport SEXP _deforestable_T_sq_nonpar_precomp_cpp(SEXP means_1SEXP, SEXP means_2SEXP, SEXP nrow1SEXP, SEXP nrow2SEXP, SEXP cov1SEXP, SEXP cov2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type means_1(means_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type means_2(means_2SEXP);
    Rcpp::traits::input_parameter< double >::type nrow1(nrow1SEXP);
    Rcpp::traits::input_parameter< double >::type nrow2(nrow2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov1(cov1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cov2(cov2SEXP);
    rcpp_result_gen = Rcpp::wrap(T_sq_nonpar_precomp_cpp(means_1, means_2, nrow1, nrow2, cov1, cov2));
    return rcpp_result_gen;
END_RCPP
}
// Compute_charact_funct
std::complex<double> Compute_charact_funct(double t, double mu, double alpha, double beta, double sigma);
RcppExport SEXP _deforestable_Compute_charact_funct(SEXP tSEXP, SEXP muSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Compute_charact_funct(t, mu, alpha, beta, sigma));
    return rcpp_result_gen;
END_RCPP
}
// ComplexCF_cpp
std::complex<double> ComplexCF_cpp(double t, Rcpp::NumericVector theta);
RcppExport SEXP _deforestable_ComplexCF_cpp(SEXP tSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(ComplexCF_cpp(t, theta));
    return rcpp_result_gen;
END_RCPP
}
// stbl_param_covmtrx_cpp
arma::mat stbl_param_covmtrx_cpp(double t_par, Rcpp::NumericVector theta);
RcppExport SEXP _deforestable_stbl_param_covmtrx_cpp(SEXP t_parSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t_par(t_parSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(stbl_param_covmtrx_cpp(t_par, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_deforestable_T_sq_nonpar_precomp_cpp", (DL_FUNC) &_deforestable_T_sq_nonpar_precomp_cpp, 6},
    {"_deforestable_Compute_charact_funct", (DL_FUNC) &_deforestable_Compute_charact_funct, 5},
    {"_deforestable_ComplexCF_cpp", (DL_FUNC) &_deforestable_ComplexCF_cpp, 2},
    {"_deforestable_stbl_param_covmtrx_cpp", (DL_FUNC) &_deforestable_stbl_param_covmtrx_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_deforestable(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
